============================= test session starts ==============================
collecting ... collected 22 items

main.py::test_create_pet_success PASSED                                  [  4%]
main.py::test_create_pet_invalid_input_400 PASSED                        [  9%]
main.py::test_update_pet_success PASSED                                  [ 13%]
main.py::test_update_pet_not_found_404 PASSED                            [ 18%]
main.py::test_update_pet_invalid_data_400 FAILED                         [ 22%]
main.py:124 (test_update_pet_invalid_data_400)
404 != [400, 422]

Expected :[400, 422]
Actual   :404
<Click to see difference>

def test_update_pet_invalid_data_400():
        """Проверка обновления питомца с невалидными данными (400)."""
        # Для теста 400 по PUT нужен существующий питомец, но с невалидным телом запроса
        # Сначала создадим питомца
        headers = {'Content-Type': 'application/json', 'accept': 'application/json'}
        temp_pet_data = {
            "id": int(time.time() * 100),
            "name": f"TempPet_{int(time.time() * 100)}",
            "category": {"id": 1, "name": "Temporary"},
            "photoUrls": [], "tags": [], "status": "available"
        }
        create_resp = requests.post(f"{BASE_URL}/pet", json=temp_pet_data, headers=headers)
        if create_resp.status_code != 200:
            pytest.skip(
                "Не удалось создать временного питомца для теста PUT 400")  # Пропускаем тест, если создание не удалось
    
        pet_id = create_resp.json().get("id", temp_pet_data["id"])
    
        # Теперь пытаемся обновить с невалидными данными
        invalid_update_data = temp_pet_data.copy()
        invalid_update_data["status"] = 123  # Неверный тип статуса
    
        response = requests.put(f"{BASE_URL}/pet", json=invalid_update_data, headers=headers)
        coverage.record_test_result("PUT /pet", response.status_code)
>       assert response.status_code in [400, 422]  # Ожидаем Bad Request или Unprocessable
E       assert 404 in [400, 422]
E        +  where 404 = <Response [404]>.status_code

main.py:149: AssertionError

main.py::test_find_pets_by_status_success PASSED                         [ 27%]
main.py::test_find_pets_by_status_invalid_400 PASSED                     [ 31%]
main.py::test_find_pets_by_tags_success PASSED                           [ 36%]
main.py::test_find_pets_by_tags_no_tag_400 PASSED                        [ 40%]
main.py::test_get_pet_by_id_success FAILED                               [ 45%]
main.py:196 (test_get_pet_by_id_success)
404 != 200

Expected :200
Actual   :404
<Click to see difference>

created_pet = 1745793335728

    def test_get_pet_by_id_success(created_pet):
        """Проверка получения питомца по ID (200)."""
        pet_id = created_pet
        headers = {'accept': 'application/json'}
        response = requests.get(f"{BASE_URL}/pet/{pet_id}", headers=headers)
        coverage.record_test_result("GET /pet/{petId}", response.status_code)
>       assert response.status_code == 200
E       assert 404 == 200
E        +  where 404 = <Response [404]>.status_code

main.py:203: AssertionError

main.py::test_get_pet_by_id_not_found_404 PASSED                         [ 50%]
main.py::test_get_pet_by_id_invalid_id_400 FAILED                        [ 54%]
main.py:215 (test_get_pet_by_id_invalid_id_400)
400 != 404

Expected :404
Actual   :400
<Click to see difference>

def test_get_pet_by_id_invalid_id_400():
        """Проверка получения питомца по невалидному ID (400)."""
        invalid_id = "invalid-id-string"
        headers = {'accept': 'application/json'}
        response = requests.get(f"{BASE_URL}/pet/{invalid_id}", headers=headers)
        coverage.record_test_result("GET /pet/{petId}", response.status_code)
        # API возвращает 404 для нечисловых ID, хотя логичнее было бы 400
        # Будем проверять на 404, как фактически работает API
>       assert response.status_code == 404  # Фактическое поведение API
E       assert 400 == 404
E        +  where 400 = <Response [400]>.status_code

main.py:224: AssertionError

main.py::test_update_pet_form_data_success FAILED                        [ 59%]
main.py:227 (test_update_pet_form_data_success)
400 != 200

Expected :200
Actual   :400
<Click to see difference>

created_pet = 1745793335728

    def test_update_pet_form_data_success(created_pet):
        """Проверка обновления питомца через form data (200)."""
        pet_id = created_pet
        headers = {'accept': 'application/json'}  # Content-Type будет application/x-www-form-urlencoded по умолчанию
        form_data = {
            'name': f'UpdatedNameForm_{pet_id}',
            'status': 'sold'
        }
        response = requests.post(f"{BASE_URL}/pet/{pet_id}", data=form_data, headers=headers)
        coverage.record_test_result("POST /pet/{petId}", response.status_code)
        # Спецификация говорит, что этот метод возвращает 200, но может возвращать и 405 (Method Not Allowed)
        # Реальное API Petstore может не поддерживать этот метод как задумано.
        # Проверим сначала на 200, как в документации swagger.io
        # Если API вернет 405 или другой код, тест упадет, и мы будем знать реальное поведение
>       assert response.status_code == 200  # По спецификации должен быть 200
E       assert 400 == 200
E        +  where 400 = <Response [400]>.status_code

main.py:242: AssertionError

main.py::test_update_pet_form_data_not_found_404 SKIPPED (Пропуск теста
POST /pet/{petId} для 404 из-за неопределенности метода)                 [ 63%]
Skipped: Пропуск теста POST /pet/{petId} для 404 из-за неопределенности метода

main.py::test_delete_pet_success FAILED                                  [ 68%]
main.py:254 (test_delete_pet_success)
200 != 404

Expected :404
Actual   :200
<Click to see difference>

created_pet = 1745793335728

    def test_delete_pet_success(created_pet):
        """Проверка успешного удаления питомца (200)."""
        pet_id = created_pet
        headers = {'accept': 'application/json'}
        # Можно добавить 'api_key': 'special-key' если требуется авторизация
        response = requests.delete(f"{BASE_URL}/pet/{pet_id}", headers=headers)
        coverage.record_test_result("DELETE /pet/{petId}", response.status_code)
        assert response.status_code == 200
    
        # Дополнительная проверка, что питомец действительно удален
        get_response = requests.get(f"{BASE_URL}/pet/{pet_id}", headers=headers)
        coverage.record_test_result("GET /pet/{petId}", get_response.status_code)  # Записываем результат GET после DELETE
>       assert get_response.status_code == 404  # Ожидаем Not Found после удаления
E       assert 200 == 404
E        +  where 200 = <Response [200]>.status_code

main.py:267: AssertionError

main.py::test_delete_pet_not_found_404 FAILED                            [ 72%]
main.py:269 (test_delete_pet_not_found_404)
200 != 404

Expected :404
Actual   :200
<Click to see difference>

def test_delete_pet_not_found_404():
        """Проверка удаления несуществующего питомца (404)."""
        non_existent_id = random.randint(9999999, 99999999)
        headers = {'accept': 'application/json'}
        response = requests.delete(f"{BASE_URL}/pet/{non_existent_id}", headers=headers)
        coverage.record_test_result("DELETE /pet/{petId}", response.status_code)
>       assert response.status_code == 404
E       assert 200 == 404
E        +  where 200 = <Response [200]>.status_code

main.py:276: AssertionError

main.py::test_delete_pet_invalid_id_400 PASSED                           [ 77%]
main.py::test_upload_image_success FAILED                                [ 81%]
main.py:289 (test_upload_image_success)
415 != 200

Expected :200
Actual   :415
<Click to see difference>

created_pet = 1745793335728

    def test_upload_image_success(created_pet):
        """Проверка успешной загрузки изображения (200)."""
        pet_id = created_pet
        headers = {'accept': 'application/json'}
        # Создаем временный dummy файл для загрузки
        file_path = "test_image.jpg"
        with open(file_path, "w") as f:
            f.write("dummy image data")
    
        files = {'file': (file_path, open(file_path, 'rb'), 'image/jpeg')}
        # Дополнительные данные формы, если нужно
        form_data = {'additionalMetadata': 'Test image upload'}
    
        response = requests.post(f"{BASE_URL}/pet/{pet_id}/uploadImage", headers=headers, data=form_data, files=files)
    
        # Закрываем и удаляем временный файл
        files['file'][1].close()
        os.remove(file_path)
    
        coverage.record_test_result("POST /pet/{petId}/uploadImage", response.status_code)
>       assert response.status_code == 200
E       assert 415 == 200
E        +  where 415 = <Response [415]>.status_code

main.py:310: AssertionError

main.py::test_upload_image_unsupported_media_type_415 PASSED             [ 86%]
main.py::test_pet_crud_e2e FAILED                                        [ 90%]E2E: Создан питомец с ID 1745793335728

main.py:327 (test_pet_crud_e2e)
404 != 200

Expected :200
Actual   :404
<Click to see difference>

pet_data = {'category': {'id': 1, 'name': 'Dogs'}, 'id': 1745793335728, 'name': 'TestPet_1745793335728', 'photoUrls': ['http://example.com/photo1.jpg'], ...}

    def test_pet_crud_e2e(pet_data):
        """Полный цикл CRUD операций для питомца."""
        headers_json = {'Content-Type': 'application/json', 'accept': 'application/json'}
        headers_accept = {'accept': 'application/json'}
    
        # 1. Создание (POST /pet)
        create_response = requests.post(f"{BASE_URL}/pet", json=pet_data, headers=headers_json)
        coverage.record_test_result("POST /pet", create_response.status_code)
        assert create_response.status_code == 200, f"E2E Ошибка создания: {create_response.text}"
        created_pet_id = create_response.json().get("id", pet_data["id"])
        print(f"E2E: Создан питомец с ID {created_pet_id}")
    
        # 2. Чтение (GET /pet/{petId})
        get_response = requests.get(f"{BASE_URL}/pet/{created_pet_id}", headers=headers_accept)
        coverage.record_test_result("GET /pet/{petId}", get_response.status_code)
>       assert get_response.status_code == 200, f"E2E Ошибка чтения: {get_response.text}"
E       AssertionError: E2E Ошибка чтения: Pet not found
E       assert 404 == 200
E        +  where 404 = <Response [404]>.status_code

main.py:343: AssertionError

main.py::test_create_pet_missing_required_field FAILED                   [ 95%]
main.py:402 (test_create_pet_missing_required_field)
200 != [400, 422, 500]

Expected :[400, 422, 500]
Actual   :200
<Click to see difference>

def test_create_pet_missing_required_field():
        """Проверка создания питомца без обязательного поля 'name' (400/422)."""
        headers = {'Content-Type': 'application/json', 'accept': 'application/json'}
        invalid_data = {  # Нет поля name
            "id": random.randint(10000, 20000),
            "category": {"id": 1, "name": "Missing"},
            "photoUrls": ["url"],
            "tags": [],
            "status": "available"
        }
        response = requests.post(f"{BASE_URL}/pet", json=invalid_data, headers=headers)
        coverage.record_test_result("POST /pet", response.status_code)
        # Спецификация может требовать 400/422, но API может вернуть 500 из-за ошибки валидации на сервере
>       assert response.status_code in [400, 422, 500]  # Допускаем 500 Internal Server Error
E       assert 200 in [400, 422, 500]
E        +  where 200 = <Response [200]>.status_code

main.py:416: AssertionError

main.py::test_get_pet_by_status_long_string PASSED                       [100%]
==================================================
                API COVERAGE REPORT                 
==================================================

1. Среднее покрытие эндпоинтов раздела Pet: 75.0%
2. Покрытие статус-кодов раздела Pet: 71.4%
3. Полностью покрытые эндпоинты API: 21.1%
4. Общее покрытие статус-кодов API: 33.3%

Детали по endpoint'ам:
DELETE /pet/{petId}: 2/2 (100.0%) ------> ['200', '400'] / ['200', '400']
DELETE /store/order/{orderId}: 0/3 (0.0%) ------> [] / ['200', '400', '404']
DELETE /user/{username}: 0/3 (0.0%) ------> [] / ['200', '400', '404']
GET /pet/findByStatus: 2/2 (100.0%) ------> ['200', '400'] / ['200', '400']
GET /pet/findByTags: 2/2 (100.0%) ------> ['200', '400'] / ['200', '400']
GET /pet/{petId}: 3/3 (100.0%) ------> ['200', '400', '404'] / ['200', '400', '404']
GET /store/inventory: 0/1 (0.0%) ------> [] / ['200']
GET /store/order/{orderId}: 0/3 (0.0%) ------> [] / ['200', '400', '404']
GET /user/login: 0/2 (0.0%) ------> [] / ['200', '400']
GET /user/logout: 0/1 (0.0%) ------> [] / ['200']
GET /user/{username}: 0/3 (0.0%) ------> [] / ['200', '400', '404']
POST /pet: 2/3 (66.7%) ------> ['200', '400'] / ['200', '400', '422']
POST /pet/{petId}: 1/2 (50.0%) ------> ['400'] / ['200', '400']
POST /pet/{petId}/uploadImage: 1/3 (33.3%) ------> ['415'] / ['200', '400', '404']
POST /store/order: 0/3 (0.0%) ------> [] / ['200', '400', '422']
POST /user: 0/1 (0.0%) ------> [] / ['200']
POST /user/createWithList: 0/1 (0.0%) ------> [] / ['200']
PUT /pet: 2/4 (50.0%) ------> ['200', '404'] / ['200', '400', '404', '422']
PUT /user/{username}: 0/3 (0.0%) ------> [] / ['200', '400', '404']

=========================


=================== 9 failed, 12 passed, 1 skipped in 39.01s ===================

Process finished with exit code 1
