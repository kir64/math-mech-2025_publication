============================= test session starts ==============================
collecting ... collected 24 items

main.py::test_pet_crud_e2e PASSED                                        [  4%]
main.py::test_post_pet_valid PASSED                                      [  8%]
main.py::test_post_pet_invalid PASSED                                    [ 12%]
main.py::test_post_pet_unprocessable PASSED                              [ 16%]
main.py::test_put_pet_valid PASSED                                       [ 20%]
main.py::test_put_pet_invalid_body PASSED                                [ 25%]
main.py::test_put_pet_not_found PASSED                                   [ 29%]
main.py::test_put_pet_unprocessable PASSED                               [ 33%]
main.py::test_get_pet_by_id PASSED                                       [ 37%]
main.py::test_get_pet_not_found PASSED                                   [ 41%]
main.py::test_get_pet_invalid_id PASSED                                  [ 45%]
main.py::test_find_by_status_valid PASSED                                [ 50%]
main.py::test_find_by_status_invalid PASSED                              [ 54%]
main.py::test_find_by_tags_valid PASSED                                  [ 58%]
main.py::test_find_by_tags_invalid PASSED                                [ 62%]
main.py::test_delete_pet PASSED                                          [ 66%]
main.py::test_delete_pet_invalid_id PASSED                               [ 70%]
main.py::test_post_pet_id_valid FAILED                                   [ 75%]
main.py:174 (test_post_pet_id_valid)
400 != 200

Expected :200
Actual   :400
<Click to see difference>

pet_data = {'category': {'id': 1, 'name': 'Dogs'}, 'id': 9999, 'name': 'TestPet', 'photoUrls': ['string'], ...}

    def test_post_pet_id_valid(pet_data):
        response = requests.post(f"{BASE_URL}{PET_ENDPOINT}", json=pet_data)
        headers = {"Content-Type": "application/x-www-form-urlencoded"}
        response = requests.post(
            f"{BASE_URL}{PET_ID_ENDPOINT.format(petId=pet_data['id'])}",
            data="name=UpdatedName&status=sold",
            headers=headers
        )
>       assert response.status_code == 200
E       assert 400 == 200
E        +  where 400 = <Response [400]>.status_code

main.py:183: AssertionError

main.py::test_post_pet_id_invalid PASSED                                 [ 79%]
main.py::test_upload_image_valid FAILED                                  [ 83%]
main.py:196 (test_upload_image_valid)
415 != 200

Expected :200
Actual   :415
<Click to see difference>

pet_data = {'category': {'id': 1, 'name': 'Dogs'}, 'id': 9999, 'name': 'TestPet', 'photoUrls': ['string'], ...}

    def test_upload_image_valid(pet_data):
        response = requests.post(f"{BASE_URL}{PET_ENDPOINT}", json=pet_data)
        response = requests.post(
            f"{BASE_URL}{UPLOAD_IMAGE_ENDPOINT.format(petId=pet_data['id'])}",
            files={'file': ('test.jpg', b'fake_image_data', 'image/jpeg')},
            headers={"accept": "application/json"}
        )
>       assert response.status_code == 200  # Adjust based on API behavior
E       assert 415 == 200
E        +  where 415 = <Response [415]>.status_code

main.py:204: AssertionError

main.py::test_upload_image_invalid PASSED                                [ 87%]
main.py::test_upload_image_not_found PASSED                              [ 91%]
main.py::test_upload_image_invalid_data PASSED                           [ 95%]
main.py::test_post_pet_missing_headers PASSED                            [100%]
==================================================
                API COVERAGE REPORT                 
==================================================

1. Среднее покрытие эндпоинтов раздела Pet: 86.5%
2. Покрытие статус-кодов раздела Pet: 85.7%
3. Полностью покрытые эндпоинты API: 26.3%
4. Общее покрытие статус-кодов API: 40.0%

Детали по endpoint'ам:
DELETE /pet/{petId}: 2/2 (100.0%) ------> ['200', '400'] / ['200', '400']
DELETE /store/order/{orderId}: 0/3 (0.0%) ------> [] / ['200', '400', '404']
DELETE /user/{username}: 0/3 (0.0%) ------> [] / ['200', '400', '404']
GET /pet/findByStatus: 2/2 (100.0%) ------> ['200', '400'] / ['200', '400']
GET /pet/findByTags: 2/2 (100.0%) ------> ['200', '400'] / ['200', '400']
GET /pet/{petId}: 3/3 (100.0%) ------> ['200', '400', '404'] / ['200', '400', '404']
GET /store/inventory: 0/1 (0.0%) ------> [] / ['200']
GET /store/order/{orderId}: 0/3 (0.0%) ------> [] / ['200', '400', '404']
GET /user/login: 0/2 (0.0%) ------> [] / ['200', '400']
GET /user/logout: 0/1 (0.0%) ------> [] / ['200']
GET /user/{username}: 0/3 (0.0%) ------> [] / ['200', '400', '404']
POST /pet: 3/3 (100.0%) ------> ['200', '400', '500'] / ['200', '400', '422']
POST /pet/{petId}: 1/2 (50.0%) ------> ['400'] / ['200', '400']
POST /pet/{petId}/uploadImage: 2/3 (66.7%) ------> ['415', '500'] / ['200', '400', '404']
POST /store/order: 0/3 (0.0%) ------> [] / ['200', '400', '422']
POST /user: 0/1 (0.0%) ------> [] / ['200']
POST /user/createWithList: 0/1 (0.0%) ------> [] / ['200']
PUT /pet: 3/4 (75.0%) ------> ['200', '400', '404'] / ['200', '400', '404', '422']
PUT /user/{username}: 0/3 (0.0%) ------> [] / ['200', '400', '404']

=========================


======================== 2 failed, 22 passed in 34.47s =========================

Process finished with exit code 1
