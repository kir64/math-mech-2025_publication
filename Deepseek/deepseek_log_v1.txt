============================= test session starts ==============================
collecting ... collected 10 items

main.py::test_add_pet PASSED                                             [ 10%]
main.py::test_update_pet PASSED                                          [ 20%]
main.py::test_find_pet_by_status PASSED                                  [ 30%]
main.py::test_find_pet_by_tags FAILED                                    [ 40%]
main.py:87 (test_find_pet_by_tags)
200 != 400

Expected :400
Actual   :200
<Click to see difference>

def test_find_pet_by_tags():
        """Тест поиска питомцев по тегам (GET /pet/findByTags)"""
        # Успешный запрос
        response = requests.get(f"{BASE_URL}/pet/findByTags", params={"tags": "string"})
        coverage.record_test_result("GET /pet/findByTags", response.status_code)
        assert response.status_code == 200
        assert isinstance(response.json(), list)
    
        # Негативный тест - невалидные теги
        bad_response = requests.get(f"{BASE_URL}/pet/findByTags", params={"tags": "invalid,tags"})
        coverage.record_test_result("GET /pet/findByTags", bad_response.status_code)
>       assert bad_response.status_code == 400
E       assert 200 == 400
E        +  where 200 = <Response [200]>.status_code

main.py:99: AssertionError

main.py::test_get_pet_by_id FAILED                                       [ 50%]
main.py:101 (test_get_pet_by_id)
404 != 200

Expected :200
Actual   :404
<Click to see difference>

setup_pet = 123456789

    def test_get_pet_by_id(setup_pet):
        """Тест получения питомца по ID (GET /pet/{petId})"""
        pet_id = setup_pet
    
        # Успешный запрос
        response = requests.get(f"{BASE_URL}/pet/{pet_id}")
        coverage.record_test_result("GET /pet/{petId}", response.status_code)
>       assert response.status_code == 200
E       assert 404 == 200
E        +  where 404 = <Response [404]>.status_code

main.py:109: AssertionError

main.py::test_update_pet_with_form_data FAILED                           [ 60%]
main.py:122 (test_update_pet_with_form_data)
400 != 200

Expected :200
Actual   :400
<Click to see difference>

setup_pet = 123456789

    def test_update_pet_with_form_data(setup_pet):
        """Тест обновления питомца с form data (POST /pet/{petId})"""
        pet_id = setup_pet
    
        # Успешное обновление
        response = requests.post(
            f"{BASE_URL}/pet/{pet_id}",
            data={"name": "form_updated", "status": "pending"}
        )
        coverage.record_test_result("POST /pet/{petId}", response.status_code)
>       assert response.status_code == 200
E       assert 400 == 200
E        +  where 400 = <Response [400]>.status_code

main.py:133: AssertionError

main.py::test_delete_pet FAILED                                          [ 70%]
main.py:143 (test_delete_pet)
200 != 404

Expected :404
Actual   :200
<Click to see difference>

setup_pet = 123456789

    def test_delete_pet(setup_pet):
        """Тест удаления питомца (DELETE /pet/{petId})"""
        pet_id = setup_pet
    
        # Успешное удаление
        response = requests.delete(f"{BASE_URL}/pet/{pet_id}")
        coverage.record_test_result("DELETE /pet/{petId}", response.status_code)
        assert response.status_code == 200
    
        # Негативный тест - повторное удаление
        bad_response = requests.delete(f"{BASE_URL}/pet/{pet_id}")
        coverage.record_test_result("DELETE /pet/{petId}", bad_response.status_code)
>       assert bad_response.status_code == 404
E       assert 200 == 404
E        +  where 200 = <Response [200]>.status_code

main.py:156: AssertionError

main.py::test_upload_image FAILED                                        [ 80%]
main.py:163 (test_upload_image)
415 != 200

Expected :200
Actual   :415
<Click to see difference>

setup_pet = 123456789

    def test_upload_image(setup_pet):
        """Тест загрузки изображения (POST /pet/{petId}/uploadImage)"""
        pet_id = setup_pet
    
        # Успешная загрузка (мок файла)
        files = {'file': ('image.jpg', b'fake_image_data', 'image/jpeg')}
        response = requests.post(f"{BASE_URL}/pet/{pet_id}/uploadImage", files=files)
        coverage.record_test_result("POST /pet/{petId}/uploadImage", response.status_code)
>       assert response.status_code == 200
E       assert 415 == 200
E        +  where 415 = <Response [415]>.status_code

main.py:172: AssertionError

main.py::test_pet_crud_workflow FAILED                                   [ 90%]
main.py:180 (test_pet_crud_workflow)
404 != 200

Expected :200
Actual   :404
<Click to see difference>

def test_pet_crud_workflow():
        """End-to-end тест CRUD операций для питомца"""
        # 1. Создание питомца (Create)
        create_response = requests.post(f"{BASE_URL}/pet", json=TEST_PET)
        coverage.record_test_result("POST /pet", create_response.status_code)
        assert create_response.status_code == 200
        pet_id = create_response.json()["id"]
    
        # 2. Чтение питомца (Read)
        read_response = requests.get(f"{BASE_URL}/pet/{pet_id}")
        coverage.record_test_result("GET /pet/{petId}", read_response.status_code)
>       assert read_response.status_code == 200
E       assert 404 == 200
E        +  where 404 = <Response [404]>.status_code

main.py:192: AssertionError

main.py::test_report_coverage PASSED                                     [100%]
==================================================
               API COVERAGE REPORT                
==================================================

1. Среднее покрытие эндпоинтов раздела Pet: 57.3%
2. Покрытие статус-кодов раздела Pet: 57.1%
3. Полностью покрытые эндпоинты API: 5.3%
4. Общее покрытие статус-кодов API: 26.7%

Детали по endpoint'ам:
PUT /pet: 3/4 (75.0%) ------> ['200', '404', '400'] / ['200', '400', '404', '422']
POST /pet: 2/3 (66.7%) ------> ['200', '400'] / ['200', '400', '422']
GET /pet/findByStatus: 2/2 (100.0%) ------> ['200', '400'] / ['200', '400']
GET /pet/findByTags: 1/2 (50.0%) ------> ['200'] / ['200', '400']
GET /pet/{petId}: 1/3 (33.3%) ------> ['404'] / ['200', '400', '404']
POST /pet/{petId}: 1/2 (50.0%) ------> ['400'] / ['200', '400']
DELETE /pet/{petId}: 1/2 (50.0%) ------> ['200'] / ['200', '400']
POST /pet/{petId}/uploadImage: 1/3 (33.3%) ------> ['415'] / ['200', '400', '404']
GET /store/inventory: 0/1 (0.0%) ------> [] / ['200']
POST /store/order: 0/3 (0.0%) ------> [] / ['200', '400', '422']
GET /store/order/{orderId}: 0/3 (0.0%) ------> [] / ['200', '400', '404']
DELETE /store/order/{orderId}: 0/3 (0.0%) ------> [] / ['200', '400', '404']
POST /user: 0/1 (0.0%) ------> [] / ['200']
POST /user/createWithList: 0/1 (0.0%) ------> [] / ['200']
GET /user/login: 0/2 (0.0%) ------> [] / ['200', '400']
GET /user/logout: 0/1 (0.0%) ------> [] / ['200']
GET /user/{username}: 0/3 (0.0%) ------> [] / ['200', '400', '404']
PUT /user/{username}: 0/3 (0.0%) ------> [] / ['200', '400', '404']
DELETE /user/{username}: 0/3 (0.0%) ------> [] / ['200', '400', '404']

==================================================
                API COVERAGE REPORT                 
==================================================

1. Среднее покрытие эндпоинтов раздела Pet: 57.3%
2. Покрытие статус-кодов раздела Pet: 57.1%
3. Полностью покрытые эндпоинты API: 5.3%
4. Общее покрытие статус-кодов API: 26.7%

Детали по endpoint'ам:
DELETE /pet/{petId}: 1/2 (50.0%) ------> ['200'] / ['200', '400']
DELETE /store/order/{orderId}: 0/3 (0.0%) ------> [] / ['200', '400', '404']
DELETE /user/{username}: 0/3 (0.0%) ------> [] / ['200', '400', '404']
GET /pet/findByStatus: 2/2 (100.0%) ------> ['200', '400'] / ['200', '400']
GET /pet/findByTags: 1/2 (50.0%) ------> ['200'] / ['200', '400']
GET /pet/{petId}: 1/3 (33.3%) ------> ['404'] / ['200', '400', '404']
GET /store/inventory: 0/1 (0.0%) ------> [] / ['200']
GET /store/order/{orderId}: 0/3 (0.0%) ------> [] / ['200', '400', '404']
GET /user/login: 0/2 (0.0%) ------> [] / ['200', '400']
GET /user/logout: 0/1 (0.0%) ------> [] / ['200']
GET /user/{username}: 0/3 (0.0%) ------> [] / ['200', '400', '404']
POST /pet: 2/3 (66.7%) ------> ['200', '400'] / ['200', '400', '422']
POST /pet/{petId}: 1/2 (50.0%) ------> ['400'] / ['200', '400']
POST /pet/{petId}/uploadImage: 1/3 (33.3%) ------> ['415'] / ['200', '400', '404']
POST /store/order: 0/3 (0.0%) ------> [] / ['200', '400', '422']
POST /user: 0/1 (0.0%) ------> [] / ['200']
POST /user/createWithList: 0/1 (0.0%) ------> [] / ['200']
PUT /pet: 3/4 (75.0%) ------> ['200', '400', '404'] / ['200', '400', '404', '422']
PUT /user/{username}: 0/3 (0.0%) ------> [] / ['200', '400', '404']

=========================


========================= 6 failed, 4 passed in 27.43s =========================

Process finished with exit code 1
