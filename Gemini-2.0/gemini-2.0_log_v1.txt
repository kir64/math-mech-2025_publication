============================= test session starts ==============================
collecting ... collected 13 items

main.py::test_validate_put_pet_status_codes FAILED                       [  7%]
main.py:62 (test_validate_put_pet_status_codes)
'500' != ['200', '400', '404', '422']

Expected :['200', '400', '404', '422']
Actual   :'500'
<Click to see difference>

def test_validate_put_pet_status_codes():
>       validate_status_codes("/pet", "PUT", get_expected_status_codes("/pet", "PUT"))

main.py:64:

main.py::test_validate_post_pet_status_codes FAILED                      [ 15%]
main.py:65 (test_validate_post_pet_status_codes)
'500' != ['200', '400', '422']

Expected :['200', '400', '422']
Actual   :'500'
<Click to see difference>

def test_validate_post_pet_status_codes():
>       validate_status_codes("/pet", "POST", get_expected_status_codes("/pet", "POST"))

main.py:67:

main.py::test_validate_get_pet_find_by_status_status_codes PASSED        [ 23%]
main.py::test_validate_get_pet_find_by_tags_status_codes PASSED          [ 30%]
main.py::test_validate_get_pet_by_id_status_codes ERROR                  [ 38%]
test setup failed
500 != 200

Expected :200
Actual   :500
<Click to see difference>

@pytest.fixture
    def pet_id():
        """Фикстура для создания и получения ID нового питомца."""
        pet_data = create_pet()
        response = requests.post(f"{BASE_URL}/pet", json=pet_data)
>       assert response.status_code == 200, f"Failed to create pet: {response.text}"
E       AssertionError: Failed to create pet: {"code":500,"message":"There was an error processing your request. It has been logged (ID: a37640298fe6ddbd)"}
E       assert 500 == 200
E        +  where 500 = <Response [500]>.status_code

main.py:32: AssertionError

main.py::test_validate_post_pet_by_id_status_codes ERROR                 [ 46%]
test setup failed
500 != 200

Expected :200
Actual   :500
<Click to see difference>

@pytest.fixture
    def pet_id():
        """Фикстура для создания и получения ID нового питомца."""
        pet_data = create_pet()
        response = requests.post(f"{BASE_URL}/pet", json=pet_data)
>       assert response.status_code == 200, f"Failed to create pet: {response.text}"
E       AssertionError: Failed to create pet: {"code":500,"message":"There was an error processing your request. It has been logged (ID: 648080ce7ce45c05)"}
E       assert 500 == 200
E        +  where 500 = <Response [500]>.status_code

main.py:32: AssertionError

main.py::test_validate_delete_pet_by_id_status_codes ERROR               [ 53%]
test setup failed
500 != 200

Expected :200
Actual   :500
<Click to see difference>

@pytest.fixture
    def pet_id():
        """Фикстура для создания и получения ID нового питомца."""
        pet_data = create_pet()
        response = requests.post(f"{BASE_URL}/pet", json=pet_data)
>       assert response.status_code == 200, f"Failed to create pet: {response.text}"
E       AssertionError: Failed to create pet: {"code":500,"message":"There was an error processing your request. It has been logged (ID: 419afbdb2c7bc7ac)"}
E       assert 500 == 200
E        +  where 500 = <Response [500]>.status_code

main.py:32: AssertionError

main.py::test_validate_post_pet_upload_image_status_codes ERROR          [ 61%]
test setup failed
500 != 200

Expected :200
Actual   :500
<Click to see difference>

@pytest.fixture
    def pet_id():
        """Фикстура для создания и получения ID нового питомца."""
        pet_data = create_pet()
        response = requests.post(f"{BASE_URL}/pet", json=pet_data)
>       assert response.status_code == 200, f"Failed to create pet: {response.text}"
E       AssertionError: Failed to create pet: {"code":500,"message":"There was an error processing your request. It has been logged (ID: 5c1ae4b0ff2786cf)"}
E       assert 500 == 200
E        +  where 500 = <Response [500]>.status_code

main.py:32: AssertionError

main.py::test_create_read_update_delete_pet FAILED                       [ 69%]
main.py:92 (test_create_read_update_delete_pet)
500 != 200

Expected :200
Actual   :500
<Click to see difference>

def test_create_read_update_delete_pet():
        # Create
        pet_data = create_pet()
        create_response = requests.post(f"{BASE_URL}/pet", json=pet_data)
>       assert create_response.status_code == 200
E       assert 500 == 200
E        +  where 500 = <Response [500]>.status_code

main.py:97: AssertionError

main.py::test_create_pet_with_invalid_status FAILED                      [ 76%]
main.py:125 (test_create_pet_with_invalid_status)
500 != 400

Expected :400
Actual   :500
<Click to see difference>

def test_create_pet_with_invalid_status():
        invalid_pet_data = create_pet()
        invalid_pet_data["status"] = "invalid_status"
        response = requests.post(f"{BASE_URL}/pet", json=invalid_pet_data)
        coverage.record_test_result("POST /pet", response.status_code)
>       assert response.status_code == 400 # Или другой ожидаемый код ошибки
E       assert 500 == 400
E        +  where 500 = <Response [500]>.status_code

main.py:131: AssertionError

main.py::test_get_pet_with_invalid_id PASSED                             [ 84%]
main.py::test_update_pet_with_missing_required_field ERROR               [ 92%]
test setup failed
500 != 200

Expected :200
Actual   :500
<Click to see difference>

@pytest.fixture
    def pet_id():
        """Фикстура для создания и получения ID нового питомца."""
        pet_data = create_pet()
        response = requests.post(f"{BASE_URL}/pet", json=pet_data)
>       assert response.status_code == 200, f"Failed to create pet: {response.text}"
E       AssertionError: Failed to create pet: {"code":500,"message":"There was an error processing your request. It has been logged (ID: 702b48c1d23280e3)"}
E       assert 500 == 200
E        +  where 500 = <Response [500]>.status_code

main.py:32: AssertionError

main.py::test_post_pet_upload_image_with_no_file ERROR                   [100%]
test setup failed
500 != 200

Expected :200
Actual   :500
<Click to see difference>

@pytest.fixture
    def pet_id():
        """Фикстура для создания и получения ID нового питомца."""
        pet_data = create_pet()
        response = requests.post(f"{BASE_URL}/pet", json=pet_data)
>       assert response.status_code == 200, f"Failed to create pet: {response.text}"
E       AssertionError: Failed to create pet: {"code":500,"message":"There was an error processing your request. It has been logged (ID: 9b2767bd932cc494)"}
E       assert 500 == 200
E        +  where 500 = <Response [500]>.status_code

main.py:32: AssertionError

==================================================
			API COVERAGE REPORT				
==================================================
1. Среднее покрытие эндпоинтов раздела Pet: 11.5%
2. Покрытие статус-кодов раздела Pet: 14.3%
3. Полностью покрытые эндпоинты API: 0.0%
4. Общее покрытие статус-кодов API: 6.7%

Детали по endpoint'ам:
PUT /pet: 1/4 (25.0%) ------> ['500'] / ['200', '400', '404', '422']
POST /pet: 1/3 (33.3%) ------> ['500'] / ['200', '400', '422']
GET /pet/findByStatus: 0/2 (0.0%) ------> [] / ['200', '400']
GET /pet/findByTags: 0/2 (0.0%) ------> [] / ['200', '400']
GET /pet/{petId}: 1/3 (33.3%) ------> ['400'] / ['200', '400', '404']
POST /pet/{petId}: 0/2 (0.0%) ------> [] / ['200', '400']
DELETE /pet/{petId}: 0/2 (0.0%) ------> [] / ['200', '400']
POST /pet/{petId}/uploadImage: 0/3 (0.0%) ------> [] / ['200', '400', '404']
GET /store/inventory: 0/1 (0.0%) ------> [] / ['200']
POST /store/order: 0/3 (0.0%) ------> [] / ['200', '400', '422']
GET /store/order/{orderId}: 0/3 (0.0%) ------> [] / ['200', '400', '404']
DELETE /store/order/{orderId}: 0/3 (0.0%) ------> [] / ['200', '400', '404']
POST /user: 0/1 (0.0%) ------> [] / ['200']
POST /user/createWithList: 0/1 (0.0%) ------> [] / ['200']
GET /user/login: 0/2 (0.0%) ------> [] / ['200', '400']
GET /user/logout: 0/1 (0.0%) ------> [] / ['200']
GET /user/{username}: 0/3 (0.0%) ------> [] / ['200', '400', '404']
PUT /user/{username}: 0/3 (0.0%) ------> [] / ['200', '400', '404']
DELETE /user/{username}: 0/3 (0.0%) ------> [] / ['200', '400', '404']

=========================


==================== 4 failed, 3 passed, 6 errors in 14.88s ====================

Process finished with exit code 1
