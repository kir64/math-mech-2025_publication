============================= test session starts ==============================
collecting ... collected 15 items

main.py::test_post_pet_success PASSED                                    [  6%]
main.py::test_post_pet_invalid_data FAILED                               [ 13%]
main.py:51 (test_post_pet_invalid_data)
500 != [400, 415]

Expected :[400, 415]
Actual   :500
<Click to see difference>

def test_post_pet_invalid_data():
        """Невалидные данные (400 Bad Request)"""
        response = requests.post(f"{BASE_URL}/pet", json={"invalid": "data"})
>       assert response.status_code in [400, 415]
E       assert 500 in [400, 415]
E        +  where 500 = <Response [500]>.status_code

main.py:55: AssertionError

main.py::test_put_pet_success PASSED                                     [ 20%]
main.py::test_put_pet_invalid_id FAILED                                  [ 26%]
main.py:72 (test_put_pet_invalid_id)
400 != 404

Expected :404
Actual   :400
<Click to see difference>

def test_put_pet_invalid_id():
        """Невалидный ID (404 Not Found)"""
        response = requests.put(f"{BASE_URL}/pet", json={"id": "invalid"})
>       assert response.status_code == 404
E       assert 400 == 404
E        +  where 400 = <Response [400]>.status_code

main.py:76: AssertionError

main.py::test_get_pet_success FAILED                                     [ 33%]
main.py:80 (test_get_pet_success)
404 != 200

Expected :200
Actual   :404
<Click to see difference>

test_pet = 999888777

    def test_get_pet_success(test_pet):
        """Успешное получение питомца (200 OK)"""
        response = requests.get(f"{BASE_URL}/pet/{test_pet}")
>       assert response.status_code == 200
E       assert 404 == 200
E        +  where 404 = <Response [404]>.status_code

main.py:84: AssertionError

main.py::test_get_pet_not_found PASSED                                   [ 40%]
main.py::test_delete_pet_success PASSED                                  [ 46%]
main.py::test_delete_pet_invalid_id PASSED                               [ 53%]
main.py::test_find_by_status_valid[available] 
main.py::test_find_by_status_valid[pending] 
main.py::test_find_by_status_valid[sold] 
main.py::test_find_by_status_invalid PASSED                     [ 60%]PASSED                       [ 66%]PASSED                          [ 73%]PASSED                              [ 80%]
main.py::test_upload_image_success FAILED                                [ 86%]
main.py:126 (test_upload_image_success)
415 != 200

Expected :200
Actual   :415
<Click to see difference>

test_pet = 999888777

    def test_upload_image_success(test_pet):
        """Успешная загрузка изображения (200 OK)"""
        files = {'file': ('image.jpg', b'content', 'image/jpeg')}
        response = requests.post(f"{BASE_URL}/pet/{test_pet}/uploadImage", files=files)
>       assert response.status_code == 200
E       assert 415 == 200
E        +  where 415 = <Response [415]>.status_code

main.py:131: AssertionError

main.py::test_upload_image_invalid_type PASSED                           [ 93%]
main.py::test_full_pet_lifecycle FAILED                                  [100%]
main.py:143 (test_full_pet_lifecycle)
200 != 404

Expected :404
Actual   :200
<Click to see difference>

def test_full_pet_lifecycle():
        # Create
        pet_data = {
            "id": 987654321,
            "name": "FullLifecyclePet",
            "photoUrls": ["https://lifecycle.com/photo.jpg"],
            "status": "pending",
            "category": {"id": 2, "name": "Cats"}
        }
        create_resp = requests.post(f"{BASE_URL}/pet", json=pet_data)
        assert create_resp.status_code == 200
        pet_id = create_resp.json()["id"]
        coverage.record_test_result("POST /pet", 200)
    
        # Read
        get_resp = requests.get(f"{BASE_URL}/pet/{pet_id}")
        assert get_resp.status_code == 200
        coverage.record_test_result("GET /pet/{petId}", 200)
    
        # Update
        update_data = {"id": pet_id, "status": "sold"}
        update_resp = requests.put(f"{BASE_URL}/pet", json=update_data)
        assert update_resp.status_code == 200
        coverage.record_test_result("PUT /pet", 200)
    
        # Delete
        delete_resp = requests.delete(f"{BASE_URL}/pet/{pet_id}")
        assert delete_resp.status_code == 200
        coverage.record_test_result("DELETE /pet/{petId}", 200)
    
        # Verify
        verify_resp = requests.get(f"{BASE_URL}/pet/{pet_id}")
>       assert verify_resp.status_code == 404
E       assert 200 == 404
E        +  where 200 = <Response [200]>.status_code

main.py:176: AssertionError

==================================================
           API COVERAGE REPORT
==================================================

1. Pet endpoints coverage: 44.8%
2. Pet status codes coverage: 42.9%
3. Fully covered endpoints: 10.5%
4. Total API coverage: 20.0%

Endpoint details:
DELETE /pet/{petId}: 2/2 (100.0%)
DELETE /store/order/{orderId}: 0/3 (0.0%)
DELETE /user/{username}: 0/3 (0.0%)
GET /pet/findByStatus: 2/2 (100.0%)
GET /pet/findByTags: 0/2 (0.0%)
GET /pet/{petId}: 2/3 (66.7%)
GET /store/inventory: 0/1 (0.0%)
GET /store/order/{orderId}: 0/3 (0.0%)
GET /user/login: 0/2 (0.0%)
GET /user/logout: 0/1 (0.0%)
GET /user/{username}: 0/3 (0.0%)
POST /pet: 1/3 (33.3%)
POST /pet/{petId}: 0/2 (0.0%)
POST /pet/{petId}/uploadImage: 1/3 (33.3%)
POST /store/order: 0/3 (0.0%)
POST /user: 0/1 (0.0%)
POST /user/createWithList: 0/1 (0.0%)
PUT /pet: 1/4 (25.0%)
PUT /user/{username}: 0/3 (0.0%)


======================== 5 failed, 10 passed in 58.50s =========================

Process finished with exit code 1
