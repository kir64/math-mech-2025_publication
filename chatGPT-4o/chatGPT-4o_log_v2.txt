============================= test session starts ==============================
collecting ... collected 12 items

main.py::test_create_pet PASSED                                          [  8%]
main.py::test_update_pet PASSED                                          [ 16%]
main.py::test_get_pet_by_id PASSED                                       [ 25%]
main.py::test_find_pet_by_status PASSED                                  [ 33%]
main.py::test_find_pet_by_tags PASSED                                    [ 41%]
main.py::test_upload_pet_image PASSED                                    [ 50%]
main.py::test_update_pet_with_form PASSED                                [ 58%]
main.py::test_get_nonexistent_pet FAILED                                 [ 66%]
main.py:132 (test_get_nonexistent_pet)
200 != 404

Expected :404
Actual   :200
<Click to see difference>

new_pet = {'id': 123456789, 'name': 'TestPet', 'photoUrls': ['http://example.com/photo.jpg'], 'status': 'available'}

    def test_get_nonexistent_pet(new_pet):
        # Удаляем pet
        delete_response = requests.delete(f"{BASE_URL}/pet/{new_pet['id']}")
        coverage.record_test_result("DELETE /pet/{petId}", delete_response.status_code)
        assert delete_response.status_code in (200, 400)
    
        # Проверяем что pet больше не существует
        get_response = requests.get(f"{BASE_URL}/pet/{new_pet['id']}")
        coverage.record_test_result("GET /pet/{petId}", get_response.status_code)
>       assert get_response.status_code == 404
E       assert 200 == 404
E        +  where 200 = <Response [200]>.status_code

main.py:142: AssertionError

main.py::test_create_pet_invalid_data FAILED                             [ 75%]
main.py:144 (test_create_pet_invalid_data)
200 != (400, 422)

Expected :(400, 422)
Actual   :200
<Click to see difference>

def test_create_pet_invalid_data():
        response = requests.post(f"{BASE_URL}/pet", json={"invalidField": "value"})
        coverage.record_test_result("POST /pet", response.status_code)
>       assert response.status_code in (400, 422)
E       assert 200 in (400, 422)
E        +  where 200 = <Response [200]>.status_code

main.py:148: AssertionError

main.py::test_update_pet_invalid_id FAILED                               [ 83%]
main.py:150 (test_update_pet_invalid_id)
500 != (400, 422)

Expected :(400, 422)
Actual   :500
<Click to see difference>

def test_update_pet_invalid_id():
        invalid_pet = {
            "id": "invalid_id",
            "name": "BadPet",
            "photoUrls": ["http://example.com/photo.jpg"],
            "status": "available"
        }
        response = requests.put(f"{BASE_URL}/pet", json=invalid_pet)
        coverage.record_test_result("PUT /pet", response.status_code)
>       assert response.status_code in (400, 422)
E       assert 500 in (400, 422)
E        +  where 500 = <Response [500]>.status_code

main.py:160: AssertionError

main.py::test_find_pet_by_invalid_status PASSED                          [ 91%]
main.py::test_print_coverage PASSED                                      [100%]
==================================================
                API COVERAGE REPORT                 
==================================================
PUT /pet: 1/4 (25.0%) ---> ['200', '500'] / ['200', '400', '404', '422']
POST /pet: 1/3 (33.3%) ---> ['200'] / ['200', '400', '422']
GET /pet/findByStatus: 1/2 (50.0%) ---> ['200'] / ['200', '400']
GET /pet/findByTags: 1/2 (50.0%) ---> ['200'] / ['200', '400']
GET /pet/{petId}: 1/3 (33.3%) ---> ['200'] / ['200', '400', '404']
POST /pet/{petId}: 1/2 (50.0%) ---> ['200'] / ['200', '400']
DELETE /pet/{petId}: 1/2 (50.0%) ---> ['200'] / ['200', '400']
POST /pet/{petId}/uploadImage: 1/3 (33.3%) ---> ['200'] / ['200', '400', '404']

Summary:
Среднее покрытие эндпоинтов раздела Pet: 40.6%
Полностью покрытые эндпоинты: 0
Общее покрытие статус-кодов: 38.1%
==================================================

==================================================
                API COVERAGE REPORT                 
==================================================

1. Среднее покрытие эндпоинтов раздела Pet: 0.0%
2. Покрытие статус-кодов раздела Pet: 0.0%
3. Полностью покрытые эндпоинты API: 0.0%
4. Общее покрытие статус-кодов API: 0.0%

Детали по endpoint'ам:
DELETE /pet/{petId}: 0/2 (0.0%) ------> [] / ['200', '400']
DELETE /store/order/{orderId}: 0/3 (0.0%) ------> [] / ['200', '400', '404']
DELETE /user/{username}: 0/3 (0.0%) ------> [] / ['200', '400', '404']
GET /pet/findByStatus: 0/2 (0.0%) ------> [] / ['200', '400']
GET /pet/findByTags: 0/2 (0.0%) ------> [] / ['200', '400']
GET /pet/{petId}: 0/3 (0.0%) ------> [] / ['200', '400', '404']
GET /store/inventory: 0/1 (0.0%) ------> [] / ['200']
GET /store/order/{orderId}: 0/3 (0.0%) ------> [] / ['200', '400', '404']
GET /user/login: 0/2 (0.0%) ------> [] / ['200', '400']
GET /user/logout: 0/1 (0.0%) ------> [] / ['200']
GET /user/{username}: 0/3 (0.0%) ------> [] / ['200', '400', '404']
POST /pet: 0/3 (0.0%) ------> [] / ['200', '400', '422']
POST /pet/{petId}: 0/2 (0.0%) ------> [] / ['200', '400']
POST /pet/{petId}/uploadImage: 0/3 (0.0%) ------> [] / ['200', '400', '404']
POST /store/order: 0/3 (0.0%) ------> [] / ['200', '400', '422']
POST /user: 0/1 (0.0%) ------> [] / ['200']
POST /user/createWithList: 0/1 (0.0%) ------> [] / ['200']
PUT /pet: 0/4 (0.0%) ------> [] / ['200', '400', '404', '422']
PUT /user/{username}: 0/3 (0.0%) ------> [] / ['200', '400', '404']

=========================


========================= 3 failed, 9 passed in 13.10s =========================

Process finished with exit code 1
